from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram import types
from keyboards.default import menu, menu_admin, menu_manager, menu_close
from loader import dp, db, bot
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from keyboards.inline.callback_datas import select_callback
from states.conditions import Test
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton








@dp.message_handler(text="–ú–µ–Ω–µ–¥–∂–µ—Ä—ã")
async def get_food(message: types.message, state: FSMContext):


    select_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text='‚úîÔ∏è–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', callback_data=select_callback.new(prefix="add"))
        ],
        [
            InlineKeyboardButton(text='‚ùå–£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', callback_data=select_callback.new(prefix="delete"))
        ],
    ])

    await message.answer("üîß–ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=select_kb)

    await Test.Q3.set()


@dp.callback_query_handler(select_callback.filter(), state=Test.Q3)
async def search_users(call: CallbackQuery, callback_data: dict, state: FSMContext):

    await call.answer(cache_time=60)
    await call.message.edit_reply_markup()

    prefix = callback_data.get("prefix")
    await state.update_data(prefix=prefix)


    await call.message.answer("üë¶–í–≤–µ–¥–∏—Ç–µ telegram id –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª—è", reply_markup=menu_close)
    await Test.Q4.set()


@dp.message_handler(state=Test.Q4)
async def get_food(message: types.message, state: FSMContext):

    telegram_id_manager = message.text

    try:
        user = await db.select_username(telegram_id_manager)

        if user:
            data = await state.get_data()

            prefix = data.get("prefix")

            if prefix == "add":
                await db.update_manager(telegram_id_manager)
                await message.answer("‚úîÔ∏è–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä", reply_markup=menu_admin)

            else:
                await db.update_manager_2(telegram_id_manager)
                await message.answer("‚ùå–ú–µ–Ω–µ–¥–∂–µ—Ä —É–¥–∞–ª–µ–Ω", reply_markup=menu_admin)
            await state.finish()

        else:
            await message.answer("ü§∑–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ", reply_markup=menu_close)

    except:
        await message.answer("‚ùóÔ∏è–í–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã!")




@dp.message_handler(text="–†–∞—Å—Å—ã–ª–∫–∞")
async def get_food(message: types.message, state: FSMContext):

    await message.answer("üßë‚Äçüíª–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ", reply_markup=menu_close)

    await Test.Q5.set()

@dp.message_handler(state=Test.Q5)
async def get_food(message: types.message, state: FSMContext):

    text = message.text


    all_tg = []


    all_users = await db.search_all_tg()

    for i in all_users:
        tg = i['telegram_id']
        all_tg.append(tg)


    for tlg in all_tg:
        await bot.send_message(chat_id=tlg, text=text)




    await message.answer("‚úâÔ∏è –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É!")

    all_tg.clear()
    await state.finish()




























